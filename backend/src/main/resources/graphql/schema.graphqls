type HabitRecord {
    id: ID!
    user: User!
    habit: Habit!
    date: String!

}

type Habit {
    id: ID!
    name: String!
    color: String!
    difficulty: Int!
    habitRecords: [HabitRecord]
}

type User {
    id: ID!
    login: String!
    password: String!
    habitRecords: [HabitRecord]
}

input HabitRecordsFilters {
    userId: ID!
    habitId: ID!
    dateFrom: String!
    dateTo: String!
}

type Query {
    habit(id: ID!): Habit
    userHabits(userId: ID!): [Habit]
    habitUsers(habitId: ID!): [User]
    habits: [Habit]
    user(id: ID!): User
    authToken(login: String!, password: String!): String
    habitRecord(id: ID!): HabitRecord
    habitRecords(userId: ID!, habitId: ID!, dateFrom: String!, dateTo: String!): [HabitRecord]
}

input HabitInput {
    name: String!
    color: String!
    difficulty: Int!
}

type Mutation {
    createUser(login: String!, password: String!): User
    createHabit(name: String!, color: String!, difficulty: Int!): Habit
    createHabitRecord(userId: ID!, habitId: ID!, date: String!): HabitRecord
}